<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Dockers on</title><link>https://googoo-s.github.io/docker/</link><description>Recent content in Dockers on</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><atom:link href="https://googoo-s.github.io/docker/index.xml" rel="self" type="application/rss+xml"/><item><title/><link>https://googoo-s.github.io/docker/docker-compose/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://googoo-s.github.io/docker/docker-compose/</guid><description>docker compose 文档
Compose 是用于定义和运行多容器 Docker 应用程序的工具。通过 Compose，您可以使用 YML 文件来配置应用程序需要的所有服务。然后，使用一个命令，就可以从 YML 文件配置中创建并启动所有服务。
Compose 使用的三个步骤：
使用 Dockerfile 定义应用程序的环境。</description></item><item><title/><link>https://googoo-s.github.io/docker/Docker-%E5%88%9D%E5%AD%A6%E8%80%85%E5%91%BD%E4%BB%A4/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://googoo-s.github.io/docker/Docker-%E5%88%9D%E5%AD%A6%E8%80%85%E5%91%BD%E4%BB%A4/</guid><description>https://docs.docker.com/reference/
一、基础命令 帮助命令 1 2 3 docker --version # 显示docker的版本信息 docker info # 显示docker的系统信息 docker 命令 --help # 显示帮助命令 镜像命令 搜索镜像 1 2 3 4 # 搜索镜像 docker search mysql # 条件过滤搜索结果 docker search --filter=STARS=5000 「列表解释」</description></item><item><title/><link>https://googoo-s.github.io/docker/Docker-%E9%95%9C%E5%83%8F%E4%BB%93%E5%BA%93/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://googoo-s.github.io/docker/Docker-%E9%95%9C%E5%83%8F%E4%BB%93%E5%BA%93/</guid><description>什么是镜像仓库（Registry） 右边的区域就是镜像仓库，术语叫 Registry，直译就是“注册中心”，意思是所有镜像的 Repository 都在这里登记保管，就像是一个巨大的档案馆。
然后我们再来看左边的“docker pull”，虚线显示了它的工作流程，先到“Docker daemon”，再到 Registry，只有当 Registry 里存有镜像才能真正把它下载到本地。
什么是 Docker Hub 什么是 Docker Hub
“Docker Hub”（https://hub.docker.com/）。</description></item><item><title/><link>https://googoo-s.github.io/docker/dockerfile/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://googoo-s.github.io/docker/dockerfile/</guid><description>Dockerfile 是用来描述文件的构成的文本文档，其中包含了用户可以在使用行调用以组合 Image 的所有命令，用户还可以使用 Docker build 实现连续执行多个命令行的自动构建。
通过编写Dockerfile生磁镜像，可以为开发、测试团队提供基本一致的环境，从而提升开发、测试团队的效率，不用再为环境不统一而发愁，同时运维也能更加方便地管理我们的镜像。
镜像的内部机制是什么 镜像就是一个打包文件，里面包含了应用程序还有它运行所依赖的环境，例如文件系统、环境变量、配置参数等等
环境变量、配置参数这些东西还是比较简单的，随便用一个 manifest 清单就可以管理，真正麻烦的是文件系统。
容器镜像的一个重大创新点：分层，术语叫“Layer”
容器镜像内部并不是一个平坦的结构，而是由许多的镜像层组成的，每层都是只读不可修改的一组文件，相同的层可以在镜像之间共享，然后多个层像搭积木一样堆叠起来，再使用一种叫**“Union FS 联合文件系统**”
可以用命令 docker inspect 来查看镜像的分层信息，比如 nginx:alpine</description></item><item><title/><link>https://googoo-s.github.io/docker/%E4%B8%8E%E5%A4%96%E7%95%8C%E8%B5%84%E6%BA%90%E7%9A%84%E5%85%B1%E4%BA%AB/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://googoo-s.github.io/docker/%E4%B8%8E%E5%A4%96%E7%95%8C%E8%B5%84%E6%BA%90%E7%9A%84%E5%85%B1%E4%BA%AB/</guid><description>如何拷贝容器内的数据 cp 命令，它可以在宿主机和容器之间拷贝文件，是最基本的一种数据交换功能。
docker cp 的用法很简单，很类似 Linux 的“cp”“scp”，指定源路径（src path）和目标路径（dest path）就可以了。如果源路径是宿主机那么就是把文件拷贝进容器，如果源路径是容器那么就是把文件拷贝出容器，注意需要用容器名或者容器 ID 来指明是哪个容器的路径。
1 2 docker cp a.txt 062:/tmp 如何共享主机上的文件 只需要在 docker run 命令启动容器的时候使用 -v 参数就行，具体的格式是“宿主机路径: 容器内路径”。</description></item><item><title/><link>https://googoo-s.github.io/docker/%E5%A6%82%E4%BD%95%E5%AE%B9%E5%99%A8%E5%8C%96%E5%BA%94%E7%94%A8/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://googoo-s.github.io/docker/%E5%A6%82%E4%BD%95%E5%AE%B9%E5%99%A8%E5%8C%96%E5%BA%94%E7%94%A8/</guid><description>镜像是容器的静态形式，它打包了应用程序的所有运行依赖项，方便保存和传输。使用容器技术运行镜像，就形成了动态的容器，由于镜像只读不可修改，所以应用程序的运行环境总是一致的。
容器化的应用就是指以镜像的形式打包应用程序，然后在容器环境里从镜像启动容器。
我这里就对今天的镜像操作和容器操作做个小结：
常用的镜像操作有 docker pull、docker images、docker rmi，分别是拉取镜像、查看镜像和删除镜像。
用来启动容器的 docker run 是最常用的命令，它有很多参数用来调整容器的运行状态，对于后台服务来说应该使用 -d。
docker exec 命令可以在容器内部执行任意程序，对于调试排错特别有用。</description></item></channel></rss>