<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>GO/八股文 on</title><link>https://googoo-s.github.io/tags/GO/%E5%85%AB%E8%82%A1%E6%96%87/</link><description>Recent content in GO/八股文 on</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://googoo-s.github.io/tags/GO/%E5%85%AB%E8%82%A1%E6%96%87/index.xml" rel="self" type="application/rss+xml"/><item><title>Golang基础</title><link>https://googoo-s.github.io/GO/%E5%85%AB%E8%82%A1%E6%96%87/Golang%E5%9F%BA%E7%A1%80/</link><pubDate>Sun, 25 Feb 2024 00:00:00 +0000</pubDate><guid>https://googoo-s.github.io/GO/%E5%85%AB%E8%82%A1%E6%96%87/Golang%E5%9F%BA%E7%A1%80/</guid><description>init 和 main 函数相关特点 init 函数 （没有输入参数、返回值）的主要作用： 初始化不能采用初始化表达式初始化的变量。 程序运行前的注册。 实现sync.Once功能。 其他 init 顺序 在同一个 package 中，可以多个文件中定义 init 方法 在同一个 go 文件中，可以重复定义 init 方法 在同一个 package 中，不同文件中的 init 方法的执行按照文件名先后执行各个文件中的 init 方法 在同一个文件中的多个 init 方法，按照在代码中编写的顺序依次执行不同的 init 方法 对于不同的 package，如果不相互依赖的话，按照 main 包中 import 的顺序调用其包中的 init() 函数 如果 package 存在依赖，调用顺序为最后被依赖的最先被初始化，例如：导入顺序 main –&amp;gt; A –&amp;gt; B –&amp;gt; C，则初始化顺序为 C –&amp;gt; B –&amp;gt; A –&amp;gt; main，一次执行对应的 init 方法。 所有 init 函数都在同⼀个 goroutine 内执行。 所有 init 函数结束后才会执行 main.</description></item><item><title>Slice</title><link>https://googoo-s.github.io/GO/%E5%85%AB%E8%82%A1%E6%96%87/Slice/</link><pubDate>Sun, 25 Feb 2024 00:00:00 +0000</pubDate><guid>https://googoo-s.github.io/GO/%E5%85%AB%E8%82%A1%E6%96%87/Slice/</guid><description>nil 切片和空切片指向的地址一样？ 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 func main() { var s1 []int s2 := make([]int, 0) s3 := make([]int, 0) data1 := (*reflect.</description></item></channel></rss>